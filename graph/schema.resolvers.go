package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"

	"github.com/d0kur0/employees/graph/model"
)

// CreateDepartment is the resolver for the createDepartment field.
func (r *mutationResolver) CreateDepartment(ctx context.Context, input model.NewDepartment) (*model.Department, error) {
	panic(fmt.Errorf("not implemented: CreateDepartment - createDepartment"))
}

// UpdateDepartment is the resolver for the updateDepartment field.
func (r *mutationResolver) UpdateDepartment(ctx context.Context, input model.NewDepartment) (*model.Department, error) {
	panic(fmt.Errorf("not implemented: UpdateDepartment - updateDepartment"))
}

// DeleteDepartment is the resolver for the deleteDepartment field.
func (r *mutationResolver) DeleteDepartment(ctx context.Context, input string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteDepartment - deleteDepartment"))
}

// CreatePosition is the resolver for the createPosition field.
func (r *mutationResolver) CreatePosition(ctx context.Context, input *model.NewPosition) (*model.TeamPosition, error) {
	panic(fmt.Errorf("not implemented: CreatePosition - createPosition"))
}

// UpdatePosition is the resolver for the updatePosition field.
func (r *mutationResolver) UpdatePosition(ctx context.Context, input *model.UpdatePosition) (*model.TeamPosition, error) {
	panic(fmt.Errorf("not implemented: UpdatePosition - updatePosition"))
}

// DeletePosition is the resolver for the deletePosition field.
func (r *mutationResolver) DeletePosition(ctx context.Context, positionID string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeletePosition - deletePosition"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input *model.NewUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input *model.UpdateUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// CreateTeam is the resolver for the createTeam field.
func (r *mutationResolver) CreateTeam(ctx context.Context, input *model.NewTeam) (*model.Team, error) {
	panic(fmt.Errorf("not implemented: CreateTeam - createTeam"))
}

// UpdateTeam is the resolver for the updateTeam field.
func (r *mutationResolver) UpdateTeam(ctx context.Context, input *model.NewTeam) (*model.Team, error) {
	panic(fmt.Errorf("not implemented: UpdateTeam - updateTeam"))
}

// DeleteTeam is the resolver for the deleteTeam field.
func (r *mutationResolver) DeleteTeam(ctx context.Context, teamID string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTeam - deleteTeam"))
}

// InviteUserToTeam is the resolver for the inviteUserToTeam field.
func (r *mutationResolver) InviteUserToTeam(ctx context.Context, input model.NewInviteToTeam) (*bool, error) {
	panic(fmt.Errorf("not implemented: InviteUserToTeam - inviteUserToTeam"))
}

// RemoveUserFromTeam is the resolver for the removeUserFromTeam field.
func (r *mutationResolver) RemoveUserFromTeam(ctx context.Context, userID string) (*bool, error) {
	panic(fmt.Errorf("not implemented: RemoveUserFromTeam - removeUserFromTeam"))
}

// SignIn is the resolver for the signIn field.
func (r *mutationResolver) SignIn(ctx context.Context, input *model.SignInForm) (*model.UserSession, error) {
	panic(fmt.Errorf("not implemented: SignIn - signIn"))
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterForm) (*model.UserSession, error) {
	panic(fmt.Errorf("not implemented: Register - register"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, limit *int, offset *int) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Teams is the resolver for the teams field.
func (r *queryResolver) Teams(ctx context.Context, limit *int, offset *int, departmentID *string) ([]*model.Team, error) {
	panic(fmt.Errorf("not implemented: Teams - teams"))
}

// Departments is the resolver for the departments field.
func (r *queryResolver) Departments(ctx context.Context, limit *int, offset *int) ([]*model.Department, error) {
	panic(fmt.Errorf("not implemented: Departments - departments"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
