scalar Time

enum UserStatus {
  active,
  blocked
}

type User {
  id: ID!
  name: String!
  email: String!
  status: UserStatus!
  isAdmin: Boolean!
  createdAt: Time!
  updatedAt: Time
  deletedAt: Time
  passwordHash: String!
}

type UserSession {
  id: ID!
  token: String!
  userID: ID!
  createdAt: Time!
  updatedAt: Time
  deletedAt: Time
}

type Department {
  id: ID!
  name: String!
  createdAt: Time!
  updatedAt: Time
  deletedAt: Time
  ownerUserId: ID!
}

type TeamPosition {
  id: ID!
  name: String!
  teamID: ID!
  createdAt: Time!
  updatedAt: Time
  deletedAt: Time
  createdByUserID: ID!
  updatedByUserID: ID
  deletedByUserID: ID
}

type TeamMember {
  id: ID!
  userID: ID!
  createdAt: Time!
  updatedAt: Time
  deletedAt: Time
  positions: [TeamPosition]!
  invitedByUserID: ID!
}

type Team {
  id: ID!
  name: String!
  members: [TeamMember]!
  ownerUserId: ID!
  departmentId: ID!
}

type Query {
  users(limit: Int = 10, offset: Int = 0): [User]!
  teams(limit: Int = 10, offset: Int = 0, departmentID: ID): [Team]!
  departments(limit: Int = 10, offset: Int = 0): [Department]!
}

input NewDepartment {
  name: String!
  ownerUserId: ID!
}

input RegisterForm {
  name: String!
  email: String!
  password: String!
}

input SignInForm {
  email: String!
  password: String!
}

input NewUser {
  name: String!
  email: String!
  isAdmin: Boolean
  password: String!
}

input UpdateUser {
  name: String!
  email: String!
  status: UserStatus!
  isAdmin: Boolean
  password: String!
}

input NewTeam {
  name: String!
  members: [ID]!
  ownerUserId: ID!
  departmentID: ID!
}

input NewInviteToTeam {
  userID: ID!
  positionID: ID!
}

input NewPosition {
  name: String!
  teamID: ID!
}

input UpdatePosition {
  name: String!
}

type Mutation {
  createDepartment(input: NewDepartment!): Department!
  updateDepartment(input: NewDepartment!): Department!
  deleteDepartment(input: ID!): Boolean

  createPosition(input: NewPosition): TeamPosition
  updatePosition(input: UpdatePosition): TeamPosition
  deletePosition(positionID: ID!): Boolean

  createUser(input: NewUser): User!
  updateUser(input: UpdateUser): User!

  createTeam(input: NewTeam): Team
  updateTeam(input: NewTeam): Team
  deleteTeam(teamID: ID!): Boolean

  inviteUserToTeam(input: NewInviteToTeam!): Boolean
  removeUserFromTeam(userID: ID!): Boolean

  signIn(input: SignInForm): UserSession
  register(input: RegisterForm!): UserSession
}
