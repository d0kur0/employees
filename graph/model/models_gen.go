// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Department struct {
	ID          string     `json:"id"`
	Name        string     `json:"name"`
	CreatedAt   time.Time  `json:"createdAt"`
	UpdatedAt   *time.Time `json:"updatedAt,omitempty"`
	DeletedAt   *time.Time `json:"deletedAt,omitempty"`
	OwnerUserID string     `json:"ownerUserId"`
}

type NewDepartment struct {
	Name        string `json:"name"`
	OwnerUserID string `json:"ownerUserId"`
}

type NewInviteToTeam struct {
	UserID     string `json:"userID"`
	PositionID string `json:"positionID"`
}

type NewPosition struct {
	Name   string `json:"name"`
	TeamID string `json:"teamID"`
}

type NewTeam struct {
	Name         string    `json:"name"`
	Members      []*string `json:"members"`
	OwnerUserID  string    `json:"ownerUserId"`
	DepartmentID string    `json:"departmentID"`
}

type NewUser struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	IsAdmin  *bool  `json:"isAdmin,omitempty"`
	Password string `json:"password"`
}

type RegisterForm struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type SignInForm struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Team struct {
	ID           string        `json:"id"`
	Name         string        `json:"name"`
	Members      []*TeamMember `json:"members"`
	OwnerUserID  string        `json:"ownerUserId"`
	DepartmentID string        `json:"departmentId"`
}

type TeamMember struct {
	ID              string          `json:"id"`
	UserID          string          `json:"userID"`
	CreatedAt       time.Time       `json:"createdAt"`
	UpdatedAt       *time.Time      `json:"updatedAt,omitempty"`
	DeletedAt       *time.Time      `json:"deletedAt,omitempty"`
	Positions       []*TeamPosition `json:"positions"`
	InvitedByUserID string          `json:"invitedByUserID"`
}

type TeamPosition struct {
	ID              string     `json:"id"`
	Name            string     `json:"name"`
	TeamID          string     `json:"teamID"`
	CreatedAt       time.Time  `json:"createdAt"`
	UpdatedAt       *time.Time `json:"updatedAt,omitempty"`
	DeletedAt       *time.Time `json:"deletedAt,omitempty"`
	CreatedByUserID string     `json:"createdByUserID"`
	UpdatedByUserID *string    `json:"updatedByUserID,omitempty"`
	DeletedByUserID *string    `json:"deletedByUserID,omitempty"`
}

type UpdatePosition struct {
	Name string `json:"name"`
}

type UpdateUser struct {
	Name     string     `json:"name"`
	Email    string     `json:"email"`
	Status   UserStatus `json:"status"`
	IsAdmin  *bool      `json:"isAdmin,omitempty"`
	Password string     `json:"password"`
}

type User struct {
	ID           string     `json:"id"`
	Name         string     `json:"name"`
	Email        string     `json:"email"`
	Status       UserStatus `json:"status"`
	IsAdmin      bool       `json:"isAdmin"`
	CreatedAt    time.Time  `json:"createdAt"`
	UpdatedAt    *time.Time `json:"updatedAt,omitempty"`
	DeletedAt    *time.Time `json:"deletedAt,omitempty"`
	PasswordHash string     `json:"passwordHash"`
}

type UserSession struct {
	ID        string     `json:"id"`
	Token     string     `json:"token"`
	UserID    string     `json:"userID"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
}

type UserStatus string

const (
	UserStatusActive  UserStatus = "active"
	UserStatusBlocked UserStatus = "blocked"
)

var AllUserStatus = []UserStatus{
	UserStatusActive,
	UserStatusBlocked,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusActive, UserStatusBlocked:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
