package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"

	"github.com/d0kur0/employees/graph/model"
)

// CreateTeamPosition is the resolver for the createTeamPosition field.
func (r *mutationResolver) CreateTeamPosition(ctx context.Context, input *model.NewPosition) (*model.TeamPosition, error) {
	panic(fmt.Errorf("not implemented: CreateTeamPosition - createTeamPosition"))
}

// UpdateTeamPosition is the resolver for the updateTeamPosition field.
func (r *mutationResolver) UpdateTeamPosition(ctx context.Context, input *model.UpdatePosition) (*model.TeamPosition, error) {
	panic(fmt.Errorf("not implemented: UpdateTeamPosition - updateTeamPosition"))
}

// DeleteTeamPosition is the resolver for the deleteTeamPosition field.
func (r *mutationResolver) DeleteTeamPosition(ctx context.Context, positionID string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTeamPosition - deleteTeamPosition"))
}

// CreateTeam is the resolver for the createTeam field.
func (r *mutationResolver) CreateTeam(ctx context.Context, input *model.NewTeam) (*model.Team, error) {
	panic(fmt.Errorf("not implemented: CreateTeam - createTeam"))
}

// UpdateTeam is the resolver for the updateTeam field.
func (r *mutationResolver) UpdateTeam(ctx context.Context, input *model.NewTeam) (*model.Team, error) {
	panic(fmt.Errorf("not implemented: UpdateTeam - updateTeam"))
}

// DeleteTeam is the resolver for the deleteTeam field.
func (r *mutationResolver) DeleteTeam(ctx context.Context, teamID string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTeam - deleteTeam"))
}

// InviteUserToTeam is the resolver for the inviteUserToTeam field.
func (r *mutationResolver) InviteUserToTeam(ctx context.Context, input model.NewInviteToTeam) (*bool, error) {
	panic(fmt.Errorf("not implemented: InviteUserToTeam - inviteUserToTeam"))
}

// RemoveUserFromTeam is the resolver for the removeUserFromTeam field.
func (r *mutationResolver) RemoveUserFromTeam(ctx context.Context, userID string) (*bool, error) {
	panic(fmt.Errorf("not implemented: RemoveUserFromTeam - removeUserFromTeam"))
}

// Teams is the resolver for the teams field.
func (r *queryResolver) Teams(ctx context.Context, limit *int, offset *int, departmentID *string) ([]*model.Team, error) {
	panic(fmt.Errorf("not implemented: Teams - teams"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
